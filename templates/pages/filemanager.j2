<style>
    #article-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: left;
        margin: 2rem;
    }

    main article {
        width: 225px;
        height: 225px;
        margin: 10px;
        box-sizing: border-box;
    }

    main article.file {
        background-color: var(--tertiary-background-color);
    }

    main article:not(.file) {
        background-color: var(--secondary-background-color);
    }

    main article:hover {
        cursor: pointer;
        transform: scale(1.05);
    }

    main article.file:hover {
        border: 2px solid blue;
    }

    main article.file.selected {
        border: 2px solid blue;
    }

    main article.file.selected:hover {
        border: 2px solid blue;
    }

    main article h1 {
        margin: 0.5rem;
        font-size: 1.5em;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
        overflow: scroll;
    }

    main article div {
        display: flex;
        justify-content: center;
        pointer-events: none;
    }

    main article div i {
        font-size: 8em;
        margin-top: 1.5rem;
    }
</style>

<script>
    function uploadFiles() {
        // Open file dialog
        const input = document.createElement('input');
        input.type = 'file';
        input.multiple = true;
        input.click();

        input.onchange = () => {
            const formData = new FormData();
            for (const file of input.files) {
                formData.append('files', file);
            }
            path = new URLSearchParams(window.location.search).get('path');

            $.ajax({
                url: "/api/filemanager/" + (path ? path : ""),
                type: "POST",
                data: formData,
                contentType: false,
                processData: false,
                beforeSend: () => {
                    spaManager.setLoading(true)
                },
                success: (data) => {
                    spaManager.goToPage("filemanager", { "path": (path ? path : "") })
                },
                complete: () => {
                    spaManager.setLoading(false)
                },
                error: (err) => {
                    alert("An error occurred while uploading file: " + err.responseText);
                }
            });
        }

    }

    function createFolder() {
        const folderName = prompt("Enter folder name:");

        if (folderName) {

            // Input validation
            if (folderName.includes("/")) {
                alert("Folder name cannot contain '/'");
                return;
            }

            if (folderName.includes("\\")) {
                alert("Folder name cannot contain '\\'");
                return;
            }

            if (folderName.includes("..")) {
                alert("Folder name cannot contain '..'");
                return;
            }

            if (folderName > 40) {
                alert("Folder name cannot be longer than 40 characters");
                return;
            }

            path = new URLSearchParams(window.location.search).get('path');
            $.ajax({
                url: "/api/filemanager/" + (path ? path + "/" : "/") + folderName,
                type: "PUT",
                beforeSend: () => {
                    spaManager.setLoading(true)
                },
                success: (data) => {
                    spaManager.goToPage("filemanager", { "path": (path ? path : "") })
                },
                complete: () => {
                    spaManager.setLoading(false)
                },
                error: (err) => {
                    alert("An error occurred while creating folder: " + err.responseText);
                }
            });
        }
    }

    function deleteSelectedFiles() {
        path = new URLSearchParams(window.location.search).get('path');

        $.ajax({
            url: "/api/filemanager/" + (path ? path : ""),
            type: "DELETE",
            data: JSON.stringify({ "files": $("article.file.selected").map((i, e) => $(e).data("name")).get() }),
            contentType: "application/json",
            beforeSend: () => {
                spaManager.setLoading(true)
            },
            success: (data) => {
                spaManager.goToPage("filemanager", { "path": (path ? path : "") })
            },
            complete: () => {
                spaManager.setLoading(false)
            },
            error: (err) => {
                alert("An error occurred while deleting files: " + err.responseText);
            }
        });
    }

    function deleteFolder() {
        path = new URLSearchParams(window.location.search).get('path');
        if ($("article.file, article.directory").length > 0) {
            if (!confirm("Are you sure you want to delete this folder?")) {
                return;
            }
        }

        $.ajax({
            url: "/api/filemanager/" + path + "/",
            type: "DELETE",
            beforeSend: () => {
                spaManager.setLoading(true)
            },
            success: (data) => {
                spaManager.goToPage("filemanager", { "path": path.split("/").slice(0, -1).join("/") })
            },
            complete: () => {
                spaManager.setLoading(false)
            },
            error: (err) => {
                alert("An error occurred while deleting folder: " + err.responseText);
            }
        });
    }

    function runComposer() {
        const path = new URLSearchParams(window.location.search).get('path');
        $.ajax({
            url: "/api/filemanager/composer/" + (path ? path : ""),
            type: "POST",
            beforeSend: () => {
                spaManager.setLoading(true)
            },
            success: (data) => {
                alertManager.alert("Composer Install", "Composer install successful", { duration: 1500 })
            },
            complete: () => {
                spaManager.setLoading(false)
            },
            error: (err) => {
                alert("An error occurred while running composer: " + err.responseText);
            }
        });
    }

    function editFile(filename) {
        const path = new URLSearchParams(window.location.search).get('path');
        let monacoManager = new MonacoEditorManager();
        $.ajax({
            url: "/api/filemanager/download/" + (path ? path + "/" : "") + filename,
            type: "GET",
            beforeSend: () => {
                spaManager.setLoading(true)
            },
            success: (data) => {

                monacoManager.createModalEditor({
                    filename: filename,
                    content: data,
                    saveCallback: (data) => {
                        // Create UploadFile object for FastAPI
                        const file = new File([data.content], data.filename, { type: "text/plain" });
                        const formData = new FormData();
                        formData.append('file', file);

                        return $.ajax({
                            url: "/api/filemanager/edit/" + (path ? path + "/" : "") + filename,
                            type: "PUT",
                            data: formData,
                            contentType: false,
                            processData: false,
                            beforeSend: () => {
                                spaManager.setLoading(true)
                            },
                            success: (data) => {
                                spaManager.goToPage("filemanager", { "path": (path ? path : "") })
                                monacoManager.dismissEditor()
                            },
                            complete: () => {
                                spaManager.setLoading(false)
                            },
                            error: (err) => {
                                alert("An error occurred while editing file: " + err.responseText);
                            }
                        });
                    }
                })
            },
            complete: () => {
                spaManager.setLoading(false)
            },
            error: (err) => {
                alert("An error occurred while fetching file: " + err.responseText);
            }
        });

    }

    $(document).on("NAUIPageLoaded", () => {
        let path = new URLSearchParams(window.location.search).get('path');

        if (path) {
            $("#article-container").append(`<article data-action="ascend"><h1>${path}/..</h1><hr><div><i class="fa-solid fa-folder-tree"></i></div></article>`)
        }

        $.ajax({
            url: "/api/filemanager" + (path ? "?path=" + path : ""),
            type: "GET",
            beforeSend: () => {
                spaManager.setLoading(true)
            },
            success: (data) => {
                // sort list by directories first, and then alphabetically
                data.sort((a, b) => {
                    if (a.is_dir && !b.is_dir) {
                        return -1;
                    } else if (!a.is_dir && b.is_dir) {
                        return 1;
                    } else {
                        return a.name.localeCompare(b.name);
                    }
                })

                data.forEach((file) => {
                    if (file.is_dir) {
                        $("#article-container").append(`<article class="directory" data-name="${file.name}"><h1>${file.name}</h1><hr><div><i class="fa-solid fa-folder-open"></i></div></article>`)
                    } else {
                        $("#article-container").append(`<article class="file" data-name="${file.name}" data-size="${file.filesize}"><h1>${file.name}</h1><hr><div><i class="fa-solid fa-file-lines"></i></div></article>`)
                    }
                })

                $("#article-container").append(`<article data-action="upload"><h1>Upload</h1><hr><div><i class="fa-solid fa-plus"></i></div></article>`)
                $("#article-container").append(`<article data-action="createfolder"><h1>Create Folder</h1><hr><div><i class="fa-solid fa-folder-plus"></i></div></article>`)
                $("#article-container").append(`<article data-action="delete"><h1>Delete Folder</h1><hr><div><i class="fa-solid fa-trash"></i></div></article>`)
                $("#article-container").append(`<article data-action="unzip"><h1>Unzip Files</h1><hr><div><i class="fa-solid fa-archive"></i></div></article>`)
                $("#article-container").append(`<article data-action="copypath"><h1>Copy Path</h1><hr><div><i class="fa-solid fa-copy"></i></div></article>`)
                $("#article-container").append(`<article data-action="runcomposer"><h1>Composer Install</h1><hr><div><i class="fa-solid fa-terminal"></i></div></article>`)
                $("#article-container").append(`<article data-action="edit"><h1>Edit File</h1><hr><div><i class="fa-solid fa-pencil"></i></div></article>`)
            },
            complete: () => {
                $("article[data-action='unzip']").hide()
                $("article[data-action='edit']").hide()

                if (path === null) {
                    $("article[data-action='delete']").hide()
                }

                // Check if composer.json exists in the current directory
                if ($("article.file").map((i, e) => $(e).data("name")).get().includes("composer.json")) {
                    $("article[data-action='runcomposer']").show()
                } else {
                    $("article[data-action='runcomposer']").hide()
                }

                $("article.file").click((e) => {
                    $(e.target).toggleClass("selected")

                    // Check filenames to enable specific actions
                    filenames = $("article.file.selected").map((i, e) => $(e).data("name")).get();
                    if (filenames.length > 0 && filenames.every((filename) => filename.endsWith(".zip") || filename.endsWith(".tar.gz") || filename.endsWith(".tar"))) {
                        $("#unzip").show();
                    } else {
                        $("#unzip").hide();
                    }

                    if (filenames.length > 0) {
                        if (path === null) {
                            $("article[data-action='delete']").show()
                        }
                        let plural = filenames.length > 1 ? "s" : ""
                        $("article[data-action='delete']").children("h1").text(`Delete File${plural}`)
                    } else {
                        if (path === null) {
                            $("article[data-action='delete']").hide()
                        } else {
                            $("article[data-action='delete']").show()
                        }
                        $("article[data-action='delete']").children("h1").text("Delete Folder")
                    }


                    if (filenames.length === 1) {
                        extension = filenames[0].split('.').pop();
                        switch (extension) {
                            case "env":
                            case "json":
                            case "txt":
                            case "yml":
                            case "yaml":
                            case "conf":
                            case "ini":
                                $("article[data-action='edit']").show()
                                break;
                            default:
                                $("article[data-action='edit']").hide()
                                break;
                        }
                    } else {
                        $("article[data-action='edit']").hide()
                    }
                })

                $("article[data-action]").click((e) => {
                    switch ($(e.target).data("action")) {
                        case "delete":
                            if ($("article.file.selected").length > 0) {
                                deleteSelectedFiles()
                            } else {
                                deleteFolder()
                            }
                            break;
                        case "upload":
                            uploadFiles()
                            break;
                        case "ascend":
                            path = new URLSearchParams(window.location.search).get('path');
                            spaManager.goToPage("filemanager", { "path": path.split("/").slice(0, -1).join("/") })
                            break;
                        case "createfolder":
                            createFolder()
                            break;
                        case "copypath":
                            path = new URLSearchParams(window.location.search).get('path');
                            navigator.clipboard.writeText("/var/www/html/" + (path ? path + "/" : ""))
                            alertManager.alert("Copied Path", "Path copied to clipboard", { duration: 1500 })
                            break;
                        case "runcomposer":
                            runComposer()
                            break;
                        case "edit":
                            editFile($("article.file.selected").data("name"))
                            break;
                    }
                })

                $("article.directory").click((e) => {
                    spaManager.goToPage("filemanager", { "path": path ? path + "/" + $(e.target).data("name") : $(e.target).data("name") })
                });

                $("#delete").click((e) => {
                    if ($("article.file.selected").length > 0) {
                        deleteSelectedFiles()
                    } else {
                        deleteFolder()
                    }
                })

                $("#unzip").click((e) => {
                    const files = $("article.file.selected").map((i, e) => $(e).data("name")).get();

                    $.ajax({
                        url: "/api/filemanager/unzip/" + (path ? path : ""),
                        type: "POST",
                        data: JSON.stringify({ "files": files }),
                        contentType: "application/json",
                        beforeSend: () => {
                            spaManager.setLoading(true)
                        },
                        success: (data) => {
                            spaManager.goToPage("filemanager", { "path": (path ? path : "") })
                        },
                        complete: () => {
                            spaManager.setLoading(false)
                        },
                        error: (err) => {
                            alert("An error occurred while unzipping files: " + err.responseText);
                        }
                    });
                })

                spaManager.setLoading(false)
            },
            error: (err) => {
                alert("An error occurred while fetching logs: " + err.responseText);
            }
        });

    });

</script>

<div id="article-container">
</div>